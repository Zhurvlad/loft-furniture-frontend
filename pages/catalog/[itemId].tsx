import Head from 'next/head'
import React from 'react';
import {CatalogPage} from '../../components/templates/CatalogPage/index';
import {Header} from '../../components/modules/Header/Header';
import {Footer} from '../../components/modules/Footer/Footer';
import {IQueryParams} from '../../types/catalog';
import styles from '../../styles/itemPage/index.module.scss'
import {FavoriteSvg} from '../../components/elements/FavoriteSvg/index';
import {useAppSelector} from '../../hooks/redux';
import {formatPrice} from '../../utils/common';
import {shoppingCartApi} from '../../store/shoppingCart/shoppingCart.api';
import {sofaApi} from '../../store/sofa/sofa.api';
import {ItemPageList} from '../../components/modules/ItemPage/ItemPageList';
import {SofaInfo} from '../../utils/sofaInfo';
import spinnerStyles from '../../styles/spinner/index.module.scss';
import Link from 'next/link';
import {toggleCartItem} from '../../utils/shopping-cart';
import {useDispatch} from 'react-redux';
import {Custom404} from '../404';

//TODO Доделать верстку Характеристик

export default function ItemPage({query}: { query: IQueryParams }) {

  const {theme} = useAppSelector((state) => state.theme)
  const {item} = useAppSelector((state) => state.cart)
  const {user} = useAppSelector((state) => state.user)
  const darkModeClass = theme === 'dark' ? `${styles.dark_mode}` : ''

  const [spinner, setSpinner] = React.useState(false)


  const {data: cartItem} = shoppingCartApi.useGetUserCartQuery({userId: user?.user.userId})

  const {data: sofaItem, isLoading, error} = sofaApi.useGetOneSofaQuery({itemId: query.itemId})

  console.log(error)


  const isInCart = item?.some((cartItem) => cartItem.itemId === +query.itemId)
  const addedToCart = isInCart && `${styles.added}`

  const dispatch = useDispatch()

  const toggleCart = () => toggleCartItem(user?.user?.username, +query.itemId, isInCart && isInCart, setSpinner, dispatch)

  /*  const {data, error, isLoading} = useGetSofasQuery()*/


  /* React.useEffect(() => {
     fetchSofas(dispatch)
   }, [])*/



  return (
    <>
      <Head>
        <title>Loft Мебель | {sofaItem ? sofaItem.name : ''} </title>
        <meta charSet='UTF-8'/>
        <meta httpEquiv='X-UA-Compatible' content='IE-edge'/>
        <meta name="description" content="Generated by create next app"/>
        <meta name="viewport" content="width=device-width, initial-scale=1"/>
        <link rel={'icon'} type={'image/svg'} size={'32x32'} href={'/img/LogoSmall.svg'}/>
      </Head>
      <Header/>
      {!sofaItem
        ?
        <Custom404/>
        :
        <div className={'container'}>
          <div className={styles.item__page}>
            <ItemPageList sofaItem={sofaItem}/>
            <div className={styles.item__info}>
              <h1 className={`${styles.item__title} ${darkModeClass}`}>{sofaItem?.name}</h1>
              <p className={`${styles.item__subtitle} ${darkModeClass}`}>Диваны</p>
              <div className={styles.item__inner}>
                <p className={`${styles.item__price} ${darkModeClass}`}>{formatPrice(sofaItem?.price)} ₽</p>
                <button onClick={toggleCart} className={`${styles.item__btn} ${addedToCart}`}>
                  {!isInCart
                    ?
                    <p>Добавить в корзину</p>
                    :
                    spinner ? <span
                        className={spinnerStyles.spinner}
                      /> :
                      <Link href={'/cart'}>
                        <p>Перейти в корзину</p>
                      </Link>
                  }
                </button>
                <div className={`${styles.item__favorite} ${darkModeClass} ${styles.active}`}>
                  <FavoriteSvg/>
                  <span>Добавить в желаемое</span>
                </div>
              </div>
              <div className={`${styles.item__color} ${darkModeClass}`}>
                <p>Цвет:<span>Белый</span></p>
                <input
                  style={{backgroundColor: 'black'}}
                  className={`${styles.filters__color__checkbox} ${darkModeClass}  ${styles.active__color}`}
                  type="checkbox"/>
                <input
                  style={{backgroundColor: 'black'}}
                  className={`${styles.filters__color__checkbox} ${darkModeClass} `}
                  type="checkbox"/>
                <input
                  style={{backgroundColor: 'black'}}
                  className={`${styles.filters__color__checkbox} ${darkModeClass} `}
                  type="checkbox"/>
                <input
                  style={{backgroundColor: 'black'}}
                  className={`${styles.filters__color__checkbox} ${darkModeClass} `}
                  type="checkbox"/>
              </div>
              <p
                className={`${styles.item__size} ${darkModeClass}`}>Размер(Ш×Д×В): <span> 288 СМ x 254 СМ x 148 СМ</span>
              </p>
              <p className={`${styles.item__description__title} ${darkModeClass}`}>Описание</p>
              <p className={`${styles.item__description__text} ${darkModeClass}`}>Лаконичные линии и простые формы,
                безупречный стиль и индивидуальность – все это диван «Динс».
                Сдержанный скандинавский дизайн украсит любую современную обстановку. Элегантность, комфорт и
                функциональность, собранные воедино – «Динс» просто создан для размеренного отдыха в кругу семьи или
                компании друзей!</p>
            </div>
          </div>
          <div className={`${styles.item__characteristics} ${darkModeClass}`}>
            <p className={`${styles.item__characteristics__title} ${darkModeClass}`}>Характеристики</p>
            <div className={styles.item__characteristics__inner}>
              {SofaInfo.map((item) =>
                <div key={item.id}>
                  <div className={`${styles.cart__details__count} ${darkModeClass}`}>
                    <p>{item.infoName}</p>
                    <div/>
                    <p>{item.value}</p>
                  </div>
                </div>)}
            </div>
          </div>
        </div>
      }
      <Footer/>
    </>
  )
}


export async function getServerSideProps(context: { query: IQueryParams }) {
  return {
    props: {query: {...context.query}}
  }
}
